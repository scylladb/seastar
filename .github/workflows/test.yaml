name: Test

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      compiler:
        description: 'the C++ compiler to use'
        type: string
        required: true
      standard:
        description: 'the C++ standard to use'
        type: number
        required: true
      mode:
        description: 'build mode (debug, dev or release)'
        type: string
        required: true
      enables:
        description: 'the --enable-* option passed to configure.py'
        type: string
        default: ''
        required: false
      enable-ccache:
        description: 'build with ccache enabled'
        type: boolean
        default: true
        required: false
      options:
        description: 'additional options passed to configure.py'
        type: string
        default: ''
        required: false
      crypto_provider:
        description: 'cryptographic provider to use'
        type: string
        default: 'GnuTLS'
        required: false

jobs:
  test:
    timeout-minutes: 40
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "${{ contains(inputs.enables, 'dpdk') }}"

      - run: |
          sudo apt-get update

      - name: Install build dependencies
        run: |
          sudo ./install-dependencies.sh

      - name: Install clang++
        if: ${{ inputs.compiler == 'clang++' }}
        run: |
          sudo apt-get -y install clang

      - name: Install clang-scan-deps
        if: ${{ contains(inputs.enables, 'cxx-modules') }}
        run: |
          sudo apt-get -y install clang-tools

      - name: Install ccache
        if: ${{ inputs.enable-ccache }}
        run: |
          sudo apt-get -y install ccache

      - name: Setup ccache
        if: ${{ inputs.enable-ccache }}
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ inputs.compiler }}-${{ inputs.standard }}-${{ inputs.mode }}-${{ inputs.enables }}

      - name: Configure
        run: |
          if [ ${{ inputs.compiler }} = "clang++" ]; then
            CC=clang
          else
            CC=gcc
          fi
          if ${{ inputs.enable-ccache }}; then
            MAYBE_CCACHE_OPT="--ccache"
          fi
          ./configure.py                                     \
            --c++-standard ${{ inputs.standard }}            \
            --compiler ${{ inputs.compiler }}                \
            --c-compiler $CC                                 \
            --mode ${{ inputs.mode }}                        \
            $MAYBE_CCACHE_OPT                                \
            ${{ inputs.options }}                            \
            ${{ inputs.enables }}                            \
            --crypto-provider ${{ inputs.crypto_provider }}

      - name: Build
        run: cmake --build build/${{inputs.mode}}

      - name: Check Header
        if: ${{ inputs.mode == 'dev' && inputs.compiler == 'clang++' }}
        run: cmake --build build/${{ inputs.mode }} --target checkheaders

      - name: Check Include Style
        if: ${{ inputs.mode == 'dev' && inputs.compiler == 'clang++' }}
        run: cmake --build build/${{ inputs.mode }} --target check-include-style

      - name: Build with C++20 modules
        if: ${{ contains(inputs.enables, 'cxx-modules') }}
        run: cmake --build build/${{ inputs.mode }} --target hello_cxx_module

      - name: Test
        if: ${{ ! contains(inputs.enables, 'cxx-modules') }}
        run: ./test.py --mode=${{ inputs.mode }}
